{"version":3,"sources":["js\\habits.js"],"names":["addDayAndDateCells","db","window","onload","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","request","open","onerror","log","onsuccess","result","displayHabits","onupgradeneeded","e","objectStore","target","createObjectStore","keyPath","autoIncrement","createIndex","unique","getElementById","onsubmit","addHabit","days","months","monthLengths","today","Date","day","getDay","date","getDate","month","getMonth","next_month","past_month","year","getFullYear","days2","months2","todayHeader","toLowerCase","monthHeader","currentView","toggleView","querySelectorAll","forEach","viewoption","classList","toggle","document","innerHTML","todayTable","transaction","openCursor","cursor","habit","value","monthRow","createElement","setAttribute","id","appendChild","todayRow","continue","monthTable","cell","textContent","addEventListener","selectedView","addCheckboxCell","row","checkboxCell","add","dateKey","response","history","addHabitTitleCell","classname","type","title","countDay","countday","deleteButton","addDailyCells","habitStart","start","habitStartNumber","Number","habitEnd","end","habitEndNumber","currDay","startDay","i","currDate","currDateNumber","monthLength","preventDefault","titleInput","titleCountDay","endHabitDay","setDate","endday","typeInput","newHabit","oncomplete","updateHabit","habitId","objectStoreHabitRequest","get","currResponse","newResponse","put","endHabit","objectEndhabit","objectEndRequest","startday","enfResponse","finishday","deleteHabit","delete","getMonthStartDay","dayCount","dateCount","dateHeaderRow","allDateCells","length","prepend"],"mappings":"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","file":"habits.e4f6e207.map","sourceRoot":"..\\src","sourcesContent":["\r\nlet db;\r\nwindow.onload = function() {\r\n  window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n  let request = window.indexedDB.open('habits', 1);\r\n\r\n  request.onerror = function() {\r\n    console.log('database failed to open');\r\n  }\r\n  request.onsuccess = function() {\r\n    console.log('database opened successfully');\r\n    db = request.result;\r\n    displayHabits();\r\n  }\r\n\r\n  request.onupgradeneeded = function(e) {\r\n    let db = e.target.result; \r\n    \r\n    let objectStore = db.createObjectStore('habits', { keyPath: 'id', autoIncrement: true });\r\n\r\n    objectStore.createIndex('title', 'title', { unique: false });\r\n    objectStore.createIndex('type', 'type', { unique: false });\r\n    objectStore.createIndex('history', 'history', { unique: false });\r\n    objectStore.createIndex('start', 'start', { unique: false });\r\n    objectStore.createIndex('countday', 'countday', { unique: false });\r\n    objectStore.createIndex('end', 'end', { unique: false });\r\n\r\n    console.log('database setup complete');\r\n  }\r\n\r\n  document.getElementById('form').onsubmit = addHabit;\r\n}\r\n\r\n\r\nconst days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nconst monthLengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\nconst today = new Date();\r\nconst day = today.getDay();\r\nconst date = today.getDate();\r\nconst month = today.getMonth();\r\nconst next_month = today.getMonth()+1;\r\nconst past_month = today.getMonth()-1;\r\n\r\nconst year = today.getFullYear();\r\nconst days2 = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nconst months2 = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n\r\nconst todayHeader = `${date} ${months[month].toLowerCase()}  ${year} (${days2[day].toLowerCase()})`;\r\nconst monthHeader = `${months[month]} ${year}`;\r\n\r\nlet currentView = 'today'; \r\n\r\nconst toggleView = () => {\r\n  document.querySelectorAll('.view-option').forEach(viewoption => viewoption.classList.toggle('selected-view'));\r\n  document.getElementById('today-view').classList.toggle('hidden');\r\n  document.getElementById('month-view').classList.toggle('hidden');\r\n};\r\n\r\ndocument.querySelectorAll('.view-option').forEach(viewoption => {\r\n  viewoption.addEventListener('click', (e) => { \r\n    this.selectedView = e.target.id;\r\n    if (this.selectedView !== currentView) {\r\n      currentView = this.selectedView;\r\n      toggleView();\r\n    }\r\n  });\r\n});\r\n\r\n\r\n//------------------------------function displayHabits() ------------------------------//\r\n\r\nfunction displayHabits() {\r\n  monthTable = document.getElementById('month-table-body');\r\n  todayTable = document.getElementById('today-table-body');\r\n  monthTable.innerHTML = todayTable.innerHTML = \"\";\r\n\r\n  this.objectStore = db.transaction('habits').objectStore('habits');\r\n  this.objectStore.openCursor().onsuccess = function(e) {\r\n    let cursor = e.target.result;\r\n    if (cursor) {\r\n      let habit = cursor.value;\r\n      let monthRow = document.createElement('tr');// display month table\r\n      addHabitTitleCell(habit, monthRow, 'month-habit-title-cell', 'month');\r\n      addDailyCells(habit, monthRow);\r\n      monthRow.setAttribute('data-habit-id', habit.id);\r\n      monthTable.appendChild(monthRow);\r\n\r\n      // display today table\r\n      let todayRow = document.createElement('tr');\r\n      addCheckboxCell(habit, todayRow);\r\n      addHabitTitleCell(habit, todayRow, 'today-habit-title-cell', 'daily');\r\n      todayRow.setAttribute(\"data-habit-id\", habit.id);\r\n      todayTable.appendChild(todayRow);\r\n      cursor.continue();\r\n\r\n    } else \r\n    {\r\n      if (!monthTable.innerHTML) {\r\n        let monthRow = document.createElement('tr');\r\n        let cell = document.createElement('td');\r\n        cell.textContent = `create your habit`;\r\n        cell.setAttribute('colspan', 40);\r\n        monthRow.appendChild(cell);\r\n        monthTable.appendChild(monthRow);\r\n      }\r\n      if (!todayTable.innerHTML) {\r\n        let todayRow = document.createElement('tr');\r\n        let cell = document.createElement(\"td\");\r\n        cell.textContent = `create your habit!`;\r\n        cell.setAttribute(\"colspan\", 40);\r\n        todayRow.appendChild(cell);\r\n        todayTable.appendChild(todayRow);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst addCheckboxCell = (habit, row) => {\r\n  const checkboxCell = document.createElement('td');\r\n  checkboxCell.classList.add('cell', 'checkbox-cell');\r\n\r\n  let dateKey = `${days2[day]} ${months2[month]} ${date} ${year}`;\r\n\r\n  let response = habit.history[dateKey]; \r\n\r\n  if (response) {\r\n    checkboxCell.classList.add(response);\r\n\r\n    if (response === \"complete\") {\r\n      checkboxCell.innerHTML = '<i class=\"fas fa-check\"></i>';\r\n    } else if (response === \"incomplete\") {\r\n      checkboxCell.innerHTML = '<i class=\"fas fa-times\"></i>';\r\n    }\r\n  }\r\n  checkboxCell.addEventListener(\"click\", () => { updateHabit(habit.id, dateKey) });\r\n  row.appendChild(checkboxCell);\r\n}\r\n\r\nconst addHabitTitleCell = (habit, row, classname, type) => {\r\n  const title = document.createElement('td');\r\n  title.classList.add('cell', classname);\r\n  title.textContent = habit.title;\r\n\r\n  ///add count day\r\n  const countDay = document.createElement('td');\r\n  countDay.classList.add('counDay');\r\n  countDay.innerHTML = \"<span class='limit_day'>days (\"+habit.countday+\")</span>\";\r\n  row.appendChild(title);\r\n  row.appendChild(countDay);\r\n\r\n  let deleteButton = document.createElement('button');\r\n  deleteButton.textContent = 'X';\r\n  deleteButton.addEventListener('click', () => {\r\n    deleteHabit(habit.id);\r\n  });\r\n  if (type === 'month') { \r\n    deleteButton.classList.add('month-delete');\r\n    title.appendChild(deleteButton) \r\n  } else { \r\n    deleteButton.classList.add('today-delete');\r\n    title.appendChild(deleteButton);\r\n  }\r\n  \r\n\r\n  return row;\r\n};\r\n\r\nconst addDailyCells = (habit, row) => {\r\n  const habitStart = habit.start;\r\n  const habitStartNumber = Number(`${habitStart.getFullYear()}${habitStart.getMonth()}${habitStart.getDate()}`);\r\n  const habitEnd = habit.end;\r\n  const habitEndNumber = Number(`${habitEnd.getFullYear()}${habitEnd.getMonth()}${habitEnd.getDate()}`);\r\n // console.log( `habit start ${habitStartNumber}`);\r\n  //console.log( `habit end ${habitEndNumber}`);\r\n  let currDay = startDay;\r\n  for (let i = 1; i <= monthLength; i++) {\r\n    let currDate = i;\r\n    let currDateNumber = Number('' + year + month + i);\r\n    let dateKey = `${days2[currDay]} ${months2[month]} ${i} ${year}`;\r\n    //console.log('datakey' + dateKey);\r\n    const cell = document.createElement('td');\r\n    cell.classList.add('cell', 'daily-cell');\r\n\r\n    let response = habit.history[dateKey]; // 'complete', 'incomplete', null/undefined\r\n\r\n    if (currDateNumber === habitStartNumber) {\r\n      cell.classList.add(\"start-date\");\r\n    }\r\n    if (currDateNumber === habitEndNumber){\r\n      cell.classList.add(\"end-date\");\r\n    }\r\n    if (response) {\r\n      cell.classList.add(response);\r\n      if (response === 'complete') {\r\n        cell.innerHTML = '<i class=\"fas fa-check\"></i>';\r\n      } else if (response === 'incomplete') {\r\n        cell.innerHTML = '<i class=\"fas fa-times\"></i>';\r\n      }\r\n    } else if (currDateNumber >= habitStartNumber) {\r\n      if (i < date && !response) {\r\n        response = \"incomplete\";\r\n        cell.classList.add(\"incomplete\");\r\n        cell.innerHTML = '<i class=\"fas fa-times\"></i>';\r\n      }\r\n    }\r\n\r\n    if (i >= date  && i <= date) {\r\n      cell.addEventListener('click', () => { updateHabit(habit.id, dateKey)});\r\n    }\r\n    if (currDateNumber === habitEndNumber){\r\n        cell.addEventListener('click', () => { endHabit(habit.id, habitEnd)});\r\n       cell.classList.add(\"end-date\"); \r\n    }\r\n    row.appendChild(cell);\r\n\r\n    currDay++;\r\n    console.log(currDay);\r\n    if (currDay === 7) { currDay = 0 };\r\n\r\n   \r\n  }\r\n}\r\n//-----------------function addHabit()----------------------//\r\n\r\nfunction addHabit(e) {\r\n  e.preventDefault();\r\n\r\n  const titleInput = document.getElementById('habit_title').value;\r\n  let titleCountDay = document.getElementById('count-day').value;\r\n  let endHabitDay = new Date();;\r\n  endHabitDay.setDate(endHabitDay.getDate() + Number(titleCountDay));\r\n  this.endday = endHabitDay.getDate();\r\n  //console.log(titleCountDay);\r\n  //console.log(endHabitDay);\r\n  //console.log(this.endday);\r\n  const typeInput = 'daily';\r\n  let newHabit = { title: titleInput, type: typeInput, history: {}, start: new Date(), countday: titleCountDay, end: endHabitDay };\r\n  let transaction = db.transaction(['habits'], 'readwrite');\r\n  let objectStore = transaction.objectStore(\"habits\");\r\n  var request = objectStore.add(newHabit);\r\n\r\n  request.onsuccess = function() {\r\n    document.getElementById('habit_title').value = ''; \r\n    document.getElementById('count-day').value = 1; \r\n  };\r\n\r\n  transaction.oncomplete = function() {\r\n    console.log('transaction complete: database modification finished');\r\n    displayHabits();\r\n  };\r\n\r\n  transaction.onerror = function() {\r\n    console.log('transaction not opened due to error');\r\n  };\r\n}\r\n\r\n//----------------------function updateHabit()-------------------//\r\n\r\nfunction updateHabit(habitId, dateKey) {\r\n  var objectStore = db.transaction(['habits'], 'readwrite').objectStore('habits');\r\n  var objectStoreHabitRequest = objectStore.get(habitId);\r\n\r\n  objectStoreHabitRequest.onsuccess = function() {\r\n    var habit = objectStoreHabitRequest.result;\r\n\r\n    let currResponse = habit.history[dateKey];\r\n    let newResponse;\r\n\r\n    if (currResponse === 'complete') {\r\n      newResponse = 'incomplete';\r\n    } else if (currResponse === 'incomplete') {\r\n      newResponse = null;\r\n    } else {\r\n      newResponse = 'complete';\r\n    }\r\n    habit.history[dateKey] = newResponse;\r\n    var updateHabitRequest = objectStore.put(habit);\r\n    updateHabitRequest.onsuccess = function() {\r\n      displayHabits();\r\n      console.log('habit save');\r\n    }\r\n  }\r\n} \r\n\r\n/*-------------------------------endHabit()-----------------*/\r\nfunction endHabit(habitId, habitEnd) {\r\n  // let objectEndhabit = db.transaction(['habits'], 'readwrite').objectStore('habits');\r\n  // let objectEndRequest = objectEndhabit.get(habitId);\r\n\r\n\r\n  //  objectEndRequest.onsuccess = function() {\r\n  //   let habit = objectEndRequest.result;\r\n  //   console.log(\"endHabit\" + habit);\r\n  //   let enfResponse = habit.end;\r\n  //   console.log(\"history\" + enfResponse);\r\n     \r\n  //   alert( \"Congratulations! Now you have a new habit!\" );\r\n    \r\n  // }\r\n  let objectEndhabit = db.transaction(['habits'], 'readwrite').objectStore('habits');\r\n  let objectEndRequest = objectEndhabit.get(habitId);\r\n  let HabitDay = new Date();\r\n  let startday = HabitDay.getDate();\r\n\r\n   objectEndRequest.onsuccess = function() {\r\n    let habit = objectEndRequest.result;\r\n    console.log(\"start\" + startday);\r\n    let enfResponse = habit.end;\r\n    let finishday = enfResponse.getDate();\r\n    console.log(\"history\" + finishday);\r\n    \r\n     if(startday == finishday){\r\n      alert( \"Congratulations! Now you have a new habit! \" );\r\n     }\r\n  }\r\n} \r\n//------------------------function deleteHabit(habitId)----------------//\r\n\r\nfunction deleteHabit(habitId) {\r\n  let deleteRequest = db.transaction(['habits'], 'readwrite')\r\n                        .objectStore('habits')\r\n                        .delete(habitId);\r\n  deleteRequest.onsuccess = function() {\r\n    console.log('habit successfully deleted');\r\n    displayHabits();\r\n  }\r\n}\r\n\r\n//------------------- getMonthStartDay ---------------------//\r\n\r\nconst getMonthStartDay = () => {\r\n  const currDate = today.getDate();\r\n  const currDay = today.getDay();\r\n  let startDay = 0;\r\n\r\n  let dayCount = currDay;\r\n\r\n  for (let dateCount = currDate; dateCount > 0; dateCount--) {\r\n    if (dayCount === -1) {\r\n      dayCount = 6;\r\n    }\r\n    if (dateCount === 1) {\r\n      startDay = dayCount;\r\n    }\r\n    dayCount--;\r\n  }\r\n  return startDay;\r\n};\r\n\r\nconst dateHeaderRow = document.getElementById(\"date-header-row\");\r\n\r\nconst startDay = getMonthStartDay();\r\n\r\nconst monthLength = monthLengths[month];\r\n\r\nconst addDayAndDateCells = () => {\r\n  // add date cells\r\n  for (let i = 1; i <= monthLength; i++) {\r\n    const cell = document.createElement(\"td\");\r\n    cell.classList.add(\"cell\", \"date-cell\");\r\n    cell.textContent = i;\r\n    if (i === date) {\r\n      cell.classList.add(\"highlight\");\r\n    }\r\n    dateHeaderRow.appendChild(cell);\r\n  }\r\n  // add days above dates\r\n  const allDateCells = document.querySelectorAll(\".date-cell\");\r\n  for (let i = 0; i < allDateCells.length; i++) {\r\n    const day = document.createElement(\"div\");\r\n    day.textContent = days[i % 7];\r\n    allDateCells[i].prepend(day);//prepend () виставляє попередньо заповнений елемент при першому індексі\r\n  }\r\n};\r\naddDayAndDateCells();"]}