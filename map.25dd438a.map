{"version":3,"sources":["js\\map.js"],"names":["window","initAutocomplete","lat","lng","log","map","google","maps","Map","document","getElementById","input","searchBox","places","SearchBox","controls","ControlPosition","TOP_LEFT","push","addListener","setBounds","getBounds","markers","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","geometry","formatted_address","icon","Size","Point","Marker","name","location","viewport","union","extend","fitBounds"],"mappings":";AAAAA,OAAQC,iBAAkB,WAASC,IAAAA,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,WAAYC,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,UAC5CD,KAAAA,IAAMA,EACNC,KAAAA,IAAMA,EACHC,QAAAA,IAAI,KAAKF,KACfG,IAAAA,EAAM,IAAIC,OAAOC,KAAKC,IAAIC,SAASC,eAAe,SAAU,CACtD,OAAA,CAACR,IAAK,KAAKA,IAAKC,IAAK,KAAKA,KAE5B,KAAA,GACK,UAAA,YAITQ,EAAQF,SAASC,eAAe,aAChCE,EAAY,IAAIN,OAAOC,KAAKM,OAAOC,UAAUH,GAC7CI,EAAAA,SAAST,OAAOC,KAAKS,gBAAgBC,UAAUC,KAAKP,GAGpDQ,EAAAA,YAAY,iBAAkB,WACtBC,EAAAA,UAAUf,EAAIgB,eAGtBC,IAAAA,EAAU,GAGJH,EAAAA,YAAY,iBAAkB,WAClCN,IAAAA,EAASD,EAAUW,YAEnBV,GAAiB,GAAjBA,EAAOW,OAAPX,CAKIY,EAAAA,QAAQ,SAASC,GAChBC,EAAAA,OAAO,QAEN,EAAA,GAGNC,IAAAA,EAAS,IAAItB,OAAOC,KAAKsB,aACtBJ,EAAAA,QAAQ,SAASK,GAClB,GAACA,EAAMC,SAAP,CAII3B,QAAAA,IAAI0B,EAAME,mBACdC,IAAAA,EAAO,CACJH,IAAAA,EAAMG,KACL,KAAA,IAAI3B,OAAOC,KAAK2B,KAAK,GAAI,IACvB,OAAA,IAAI5B,OAAOC,KAAK4B,MAAM,EAAG,GACzB,OAAA,IAAI7B,OAAOC,KAAK4B,MAAM,GAAI,IACtB,WAAA,IAAI7B,OAAOC,KAAK2B,KAAK,GAAI,KAI/BhB,EAAAA,KAAK,IAAIZ,OAAOC,KAAK6B,OAAO,CAC7B/B,IAAAA,EACC4B,KAAAA,EACCH,MAAAA,EAAMO,KAAKP,EAAME,kBACdF,SAAAA,EAAMC,SAASO,SACPR,kBAAAA,EAAME,qBAGtBF,EAAMC,SAASQ,SAEVC,EAAAA,MAAMV,EAAMC,SAASQ,UAErBE,EAAAA,OAAOX,EAAMC,SAASO,eAzBrBlC,QAAAA,IAAI,yCA4BRA,QAAAA,IAAIkB,GACRoB,EAAAA,UAAUd","file":"map.25dd438a.map","sourceRoot":"..\\src","sourcesContent":["window. initAutocomplete= function(lat=49.5832541, lng=34.489807) {\r\n      this.lat = lat;\r\n      this.lng = lng;\r\n      console.log(this.lat);\r\n    let map = new google.maps.Map(document.getElementById('mymap'), {\r\n      center: {lat: this.lat, lng: this.lng},\r\n      // center: {lat: 49.5832541, lng: 34.489807},\r\n      zoom: 14,\r\n      mapTypeId: 'roadmap'//Displays a typical roadmap view.\r\n    });\r\n\r\n    // Create the search box and link it to the UI element.\r\n    let input = document.getElementById('pac-input');\r\n    let searchBox = new google.maps.places.SearchBox(input);\r\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n\r\n    // Bias the SearchBox results towards current map's viewport.\r\n    map.addListener('bounds_changed', function() {\r\n      searchBox.setBounds(map.getBounds());\r\n    });\r\n\r\n    let markers = [];\r\n    // Listen for the event fired when the user selects a prediction and retrieve\r\n    // more details for that place.\r\n    searchBox.addListener('places_changed', function() {\r\n      let places = searchBox.getPlaces();\r\n\r\n      if (places.length == 0) {\r\n        return;\r\n      }\r\n\r\n      // Clear out the old markers.\r\n      markers.forEach(function(marker) {\r\n        marker.setMap(null);\r\n      });\r\n      markers = [];\r\n\r\n      // For each place, get the icon, name and location.\r\n      let bounds = new google.maps.LatLngBounds();\r\n      places.forEach(function(place) {\r\n        if (!place.geometry) {\r\n          console.log(\"Returned place contains no geometry\");\r\n          return;\r\n        }\r\n        console.log(place.formatted_address);\r\n        let icon = {\r\n          url: place.icon,\r\n          size: new google.maps.Size(50, 50),\r\n          origin: new google.maps.Point(0, 0),\r\n          anchor: new google.maps.Point(17, 34),\r\n          scaledSize: new google.maps.Size(25, 25)\r\n        };\r\n\r\n        // Create a marker for each place.\r\n        markers.push(new google.maps.Marker({\r\n          map: map,\r\n          icon: icon,\r\n          title: place.name+place.formatted_address,\r\n          position: place.geometry.location,\r\n          formatted_address:place.formatted_address,\r\n        }));\r\n\r\n        if (place.geometry.viewport) {\r\n          // Only geocodes have viewport.\r\n          bounds.union(place.geometry.viewport);\r\n        } else {\r\n          bounds.extend(place.geometry.location);\r\n        }\r\n      });\r\n      console.log(markers);\r\n      map.fitBounds(bounds);\r\n    });\r\n  }\r\n  \r\n  // google.maps.event.addDomListener(window, 'load', initAutocomplete);"]}